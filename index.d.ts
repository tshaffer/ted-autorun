// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../react
//   ../../redux
//   ../../@brightsign/bsdatamodel
//   ../../@brightsign/ba-context-model
//   ../../@brightsign/bscore

import * as React from 'react';
import { Action, Dispatch, ActionCreator } from 'redux';
import { Reducer } from 'redux';
import { DmState } from '@brightsign/bsdatamodel';
import { BaContextModelState } from '@brightsign/ba-context-model';
import { BsAssetLocator } from '@brightsign/bscore';

/** @module Controller:index */

/** @module Model:index */

/** @module Selector:index */

/** @module Types:index */

/** @internal */
export interface TemplateProps {
    color: BsUiModelTemplatePropertyColorState;
    onInitModel: () => any;
    onResetModel: () => any;
    onUpdateTemplateColorAsync: () => any;
    onUpdateTemplateColorBatch: () => any;
}
export class TemplateComponent extends React.Component<TemplateProps> {
    componentDidMount(): void;
    componentWillUnmount(): void;
    renderComponent(): JSX.Element;
    renderModel(): JSX.Element;
    renderController(): JSX.Element;
    renderType(): JSX.Element;
    renderError(): JSX.Element;
    renderJavaScript(): JSX.Element;
    renderBrightSignObject(): JSX.Element;
    renderHeader(): JSX.Element;
    renderBody(): JSX.Element;
    render(): JSX.Element;
}
export const Template: import("react-redux").ConnectedComponent<typeof TemplateComponent, import("react-redux").Omit<React.ClassAttributes<TemplateComponent> & TemplateProps, "color" | "onInitModel" | "onResetModel" | "onUpdateTemplateColorAsync" | "onUpdateTemplateColorBatch">>;

export const initModel: () => (dispatch: any) => Promise<any>;
export const resetModel: () => (dispatch: any) => any;

/** @private */
export const updateTemplateColorAsync: () => (dispatch: any) => Promise<any>;
/** @private */
export const updateTemplateColorBatch: () => (dispatch: any) => any;

/** @module Model:base */
/** @private */
export const BSUIMODEL_BATCH = "BSUIMODEL_BATCH";
/** @private */
export const BSUIMODEL_REHYDRATE = "BSUIMODEL_REHYDRATE";
/** @private */
export const BSUIMODEL_RESET = "BSUIMODEL_RESET";
/** @private */
export type BsUiModelDispatch = Dispatch<any>;
/** @private */
export interface BsUiModelBaseAction extends Action {
    type: string;
    payload: {};
    error?: boolean;
    meta?: {};
}
/** @private */
export interface BsUiModelAction<T> extends BsUiModelBaseAction {
    payload: T;
}
/** @private */
export type BsUiModelActionCreator<T> = ActionCreator<BsUiModelAction<T>>;
/** @private */
export type BsUiModelThunkAction<T> = (dispatch: BsUiModelDispatch, getState: () => BsUiModelState, extraArgument: undefined) => T;
/** @private */
export const bsUiModelBatchAction: (action: BsUiModelBaseAction[]) => BsUiModelBatchAction;
/** @private */
export interface BsUiModelBatchAction extends Action {
    type: string;
    payload: BsUiModelBaseAction[];
}
/** @private */
export interface RehydrateBsUiModelParams {
    newBsUiModelState: BsUiModelState;
}
/** @private */
export type RehydrateBsUiModelAction = BsUiModelAction<RehydrateBsUiModelParams>;
export const bsUiModelRehydrateModel: (bsUiModelState: BsUiModelState) => RehydrateBsUiModelAction;
/** @private */
export type ResetBsUiModelAction = BsUiModelAction<null>;
export const bsUiModelResetModel: () => ResetBsUiModelAction;
/** @private */
export interface AutorunModelBaseAction extends Action {
    type: string;
    payload?: {} | null;
    error?: boolean;
    meta?: {};
}
/** @private */
export interface AutorunModelAction<T> extends AutorunModelBaseAction {
    payload: T;
}
/** @private */
export type AutorunModelActionCreator<T> = ActionCreator<AutorunModelAction<T>>;
export type AutorunModelThunkAction<T> = (dispatch: AutorunDispatch, getState: () => AutorunPlayerState, extraArgument: undefined) => T;
export interface AutorunBaseAction extends Action {
    type: string;
    payload: {} | null;
    error?: boolean;
    meta?: {};
}
export interface AutorunAction<T> extends AutorunBaseAction {
    payload: T;
}
export type AutorunDispatch = Dispatch<any>;
export type AutorunVoidThunkAction = any;
export type AutorunStringThunkAction = any;
export type AutorunVoidPromiseThunkAction = any;
export type AutorunThunkAction<T> = any;
export type AutorunAnyPromiseThunkAction = any;
export type AutorunActionCreator<T> = ActionCreator<AutorunAction<T>>;
export interface AutorunModelBatchAction extends Action {
    type: string;
    payload: AutorunBaseAction[];
}

/** @module Model:base */
export type BsUiReducer = Reducer<BsUiModelState>;
export const bsUiModelReducer: BsUiReducer;
export const isValidBsUiModelState: (state: any) => boolean;
export const isValidBsUiModelStateShallow: (state: any) => boolean;

/** @module Model:template */
/** @private */
export const templateReducer: (state: BsUiModelTemplateState, action: BsUiModelBatchAction) => BsUiModelTemplateState;
/** @private */
export const isValidTemplateState: (state: any) => boolean;
/** @private */
export const isValidTemplateStateShallow: (state: any) => boolean;

/** @module Model:templateProperty */
/** @private */
export const BSUIMODEL_UPDATE_TEMPLATE_PROPERTY: string;
/** @private */
export const BSUIMODEL_RESET_TEMPLATE_PROPERTY: string;
/** @private */
export type UpdateTemplatePropertyAction = BsUiModelAction<Partial<BsUiModelTemplatePropertyState>>;
/** @private */
export type ResetTemplatePropertyAction = BsUiModelAction<null>;
/** @private */
export const bsUiModelResetTemplateProperty: () => ResetTemplatePropertyAction;
/** @private */
export const bsUiModelUpdateTemplateColor: (color: BsUiModelTemplatePropertyColorState) => UpdateTemplatePropertyAction;
/** @private */
export const templatePropertyDefault: BsUiModelTemplatePropertyState;
/** @private */
export const templatePropertyReducer: (state: BsUiModelTemplatePropertyState | undefined, { type, payload }: (UpdateTemplatePropertyAction | ResetTemplatePropertyAction | ResetBsUiModelAction | BsUiModelAction<RehydrateBsUiModelParams>)) => BsUiModelTemplatePropertyState;
/** @private */
export const isValidColor: (state: any) => boolean;
/** @private */
export const isValidTemplatePropertyState: (state: any) => boolean;
/** @private */
export const isValidTemplatePropertyStateShallow: (state: any) => boolean;

/** @module Model:template */
export const ADD_HSM: string;
export const UPDATE_HSM_PROPERTIES: string;
export const SET_HSM_TOP: string;
export const SET_HSM_INITIALIZED: string;
export const ADD_HSTATE = "ADD_HSTATE";
export const SET_MEDIA_H_STATE_TIMEOUT_ID = "SET_MEDIA_H_STATE_TIMEOUT_ID";
export const SET_MEDIA_H_STATE_PARAMETER_DATA = "SET_MEDIA_H_STATE_PARAMETER_DATA";
export const SET_ACTIVE_HSTATE = "SET_ACTIVE_HSTATE";
export const QUEUE_HSM_EVENT = "QUEUE_HSM_EVENT";
export const DEQUEUE_HSM_EVENT = "DEQUEUE_HSM_EVENT";
export type AddHsmAction = AutorunAction<Partial<Hsm>>;
export function addHsm(hsm: Hsm): AddHsmAction;
export interface HsmParams {
    id: string;
    zoneId?: string;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    initialMediaStateId?: string;
    mediaStateIdToHState?: LUT;
}
export type UpdateHsmPropertiesAction = AutorunAction<HsmParams>;
export function updateHsmProperties(params: HsmParams): UpdateHsmPropertiesAction;
export type SetHsmTopAction = AutorunAction<{}>;
export function setHsmTop(hsmId: string, topStateId: string): SetHsmTopAction;
export type SetHsmInitializedAction = AutorunAction<Partial<Hsm>>;
export function setHsmInitialized(id: string, initialized: boolean): SetHsmInitializedAction;
export type SetActiveHStateAction = AutorunAction<HState | null | any>;
export function setActiveHState(hsmId: string, activeState: HState | null): SetActiveHStateAction;
export type AddHStateAction = AutorunAction<{
    id: string;
    type: HStateType;
    hsmId: string;
    superStateId: string;
    name: string;
    data?: MediaHStateData | null;
}>;
export function addHState(id: string, hStateSpecification: HStateSpecification, data?: MediaHStateData | null): AddHStateAction;
export function setMediaHStateTimeoutId(hStateId: string, timeoutId: number): any;
export function setMediaHStateParameter(hStateId: string, parameterName: string, parameterValue: any): any;
export type HsmEventAction = AutorunAction<HsmEventType>;
export function queueHsmEvent(event: HsmEventType): HsmEventAction;
export function dequeueHsmEvent(): AutorunBaseAction;
export const hsmReducer: import("redux").Reducer<import("redux").CombinedState<HsmState>, import("redux").AnyAction>;
/** @private */
export const isValidHsmState: (state: any) => boolean;

export const SET_VIDEO_ELEMENT_REF = "SET_VIDEO_ELEMENT_REF";
export type SetPlaybackAction = AutorunAction<PlaybackState>;
export const setVideoElementRef: (videoElementRef: HTMLVideoElement | null) => SetPlaybackAction;
export const playbackDefaults: PlaybackState;
export const playbackReducer: (state: PlaybackState | undefined, { type, payload }: (SetPlaybackAction)) => PlaybackState;

export const UPDATE_PRESENTATION_DATA = "UPDATE_PRESENTATION_DATA";
export const UPDATE_RUNTIME_ENVIRONMENT = "UPDATE_RUNTIME_ENVIRONMENT";
export const UPDATE_PRESENTATION_SRC_DIRECTORY = "UPDATE_PRESENTATION_SRC_DIRECTORY";
export const UPDATE_SYNC_SPEC_FILE_MAP = "UPDATE_SYNC_SPEC_FILE_MAP";
export const UPDATE_AUTOSCHEDULE = "UPDATE_AUTOSCHEDULE";
export const UPDATE_SCREEN_DIMENSIONS = "UPDATE_SCREEN_DIMENSIONS";
export type UpdatePresentationDataAction = AutorunAction<Partial<PresentationDataState>>;
export type UpdatePresentationStringAction = AutorunAction<Partial<PresentationDataState>>;
export function updatePresentationData(presentationDataState: PresentationDataState): UpdatePresentationDataAction;
export const updateRuntimeEnvironment: (runtimeEnvironment: RuntimeEnvironment) => UpdatePresentationDataAction;
export const updatePresentationSrcDirectory: (srcDirectory: string) => UpdatePresentationDataAction;
export const updatePresentationSyncSpecFileMap: (syncSpecFileMap: SyncSpecFileMap) => UpdatePresentationDataAction;
export const updatePresentationAutoschedule: (autoSchedule: AutorunSchedule) => UpdatePresentationDataAction;
export const updateScreenDimensions: (screenDimensions: Dimensions) => UpdatePresentationDataAction;
export const presentationDataDefaults: PresentationDataState;
export const presentationDataReducer: (state: PresentationDataState | undefined, { type, payload }: (UpdatePresentationDataAction)) => PresentationDataState;

/** @module Selector:base */
/** @private */
export const bsUiModelFilterBaseState: (state: any) => BsUiModelState;
/** @private */
export const bsUiModelGetBaseState: (state: BsUiModelState) => BsUiModelState;

/** @module Selector:template */
/** @private */
export const bsUiModelGetTemplateState: (state: BsUiModelState) => BsUiModelTemplateState;

/** @module Selector:templateProperty */
/** @private */
export const bsUiModelGetTemplatePropertyState: (state: BsUiModelState) => BsUiModelTemplatePropertyState;
/** @private */
export const bsUiModelGetTemplatePropertyColorState: (state: BsUiModelState) => BsUiModelTemplatePropertyColorState;

export function getHsmMap(state: any): HsmMap;
export function getHsmById(state: any, hsmId: string): Hsm;
export function getHsmByName(state: AutorunState, hsmName: string): Hsm | null;
export const getActiveHStateIdByHsmId: (state: AutorunState, hsmId: string) => HState | null;
export function getHStateById(state: any, hStateId: string | null): HState | null;
export function getHStateByName(state: any, name: string | null): HState | null;
export function getHStateByMediaStateId(state: any, hsmId: string, mediaStateId: string | null): HState | null;
export function getHsmInitialized(state: any, hsmId: string): boolean;
export function getZoneHsmList(state: any): Hsm[];
export function getZoneHsmFromZoneId(state: any, zoneId: string): Hsm | null;
export function getActiveMediaStateId(state: any, zoneId: string): string;
export function getActiveMrssDisplayIndex(state: any, zoneId: string): number;
export function getEvents(state: any): HsmEventType[];
export const getIsHsmInitialized: (state: any) => boolean;

export function getRuntimeEnvironment(state: any): RuntimeEnvironment;
export function getSrcDirectory(state: any): string;
export function getScreenDimensions(state: any): Dimensions;
export const getSyncSpecFileMap: (state: AutorunState) => SyncSpecFileMap | null;
export const getAutoschedule: (state: any) => AutorunSchedule | null;
export function getPathFromAssetName(state: AutorunState, assetName: string): string;
export function getAssetPath(state: AutorunState, assetName: string): string;
export const getSyncSpecFile: (state: AutorunState, fileName: string) => Promise<any>;
export function getSyncSpecReferencedFile(fileName: string, syncSpecFileMap: SyncSpecFileMap, rootPath: string): Promise<object>;
export function getFeedPoolDirectory(state: any): string;
export function getFeedPoolFilePath(state: any, hashValue: string): string;
export function feedPoolFileExists(state: any, hashValue: string): string;
export function getFeedCacheRoot(state: any): string;

/** @module Types:template */
/** @private */
export interface BsUiModelTemplateState {
    readonly property: BsUiModelTemplatePropertyState;
}
/** @private */
export const createTemplate: (property: BsUiModelTemplatePropertyState) => BsUiModelTemplateState;

/** @private */
export interface BsUiModelTemplatePropertyColorState {
    a: number;
    r: number;
    g: number;
    b: number;
}
/** @private */
export interface BsUiModelTemplatePropertyState {
    color: BsUiModelTemplatePropertyColorState;
}
/** @private */
export const createTemplateProperty: (color: BsUiModelTemplatePropertyColorState) => BsUiModelTemplatePropertyState;
/** @private */
export const createBsColor: (r: number, g: number, b: number, a: number) => BsUiModelTemplatePropertyColorState;

/** @module Types:base */
export class RuntimeEnvironment {
    static BrightSign: string;
    static BaconPreview: string;
    static Dev: string;
}
export interface AutorunState {
    bsdm: DmState;
    bacdm: BaContextModelState;
    bsPlayer: AutorunPlayerState;
}
export interface AutorunPlayerState {
    hsmState: HsmState;
    presentationData: PresentationDataState;
    playback: PlaybackState;
}
/** @private */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
/** @private */
export interface BsUiModelState {
    template: BsUiModelTemplateState;
}
/** @private */
export const createModel: (template: BsUiModelTemplateState) => BsUiModelState;
export interface LUT {
    [key: string]: any;
}
export interface AutorunBaseObject {
    id: string;
}
export interface AutorunMap<T extends AutorunBaseObject> {
    [id: string]: T;
}
export interface FileLUT {
    [fileName: string]: string;
}
export interface Dimensions {
    width: number;
    height: number;
}
export const autorunStateFromState: (state: any) => AutorunState;

export type HsmMap = AutorunMap<Hsm>;
export type HStateMap = AutorunMap<HState>;
export interface HsmState {
    hsmById: HsmMap;
    hStateById: HStateMap;
    hsmEventQueue: HsmEventType[];
}
export interface Hsm {
    id: string;
    name: string;
    type: HsmType;
    topStateId: string;
    activeStateId: string | null;
    initialized: boolean;
    properties: HsmProperties;
}
export type HsmProperties = ZoneHsmProperties | MediaZoneHsmProperties | {};
export interface ZoneHsmProperties {
    zoneId: string;
    x: number;
    y: number;
    width: number;
    height: number;
    initialMediaStateId: string;
}
export interface MediaZoneHsmProperties extends ZoneHsmProperties {
    mediaStateIdToHState: LUT;
}
export interface HsmEventType {
    EventType: string;
    data?: any;
    EventData?: any;
}

export class HsmType {
    static Player: string;
    static VideoOrImages: string;
}
export class HsmTimerType {
    static MediaHState: string;
    static MrssState: string;
}

export class HStateType {
    static Top: string;
    static Player: string;
    static Playing: string;
    static Waiting: string;
    static Image: string;
    static Mrss: string;
    static Video: string;
    static SuperState: string;
}
export interface HState {
    id: string;
    type: HStateType;
    hsmId: string;
    superStateId: string;
    name: string;
}
export interface MediaHState extends HState {
    data: MediaHStateData;
}
export interface MediaHStateData {
    mediaStateId: string;
    mediaStateData?: MediaHStateParamsData | null;
}
export type MediaHStateParamsData = MediaHStateCustomData;
export type MediaHStateCustomData = ImageStateData | VideoStateData | SuperStateData | MrssStateData;
export interface ImageStateData {
    timeoutId?: number;
}
export interface VideoStateData {
    timeoutId?: number;
}
export interface SuperStateData {
    timeoutId?: number;
}
export interface MrssStateData {
    timeoutId?: number;
    dataFeedId: string;
    currentFeedId: string | null;
    pendingFeedId: string | null;
    displayIndex: number;
    firstItemDisplayed: boolean;
    waitForContentTimer: any;
}
export interface HStateSpecification {
    type: HStateType;
    hsmId: string;
    superStateId: string;
    name: string;
}
export interface HSMStateData {
    nextStateId: string | null;
}

export interface PlaybackState {
    videoElementRef: HTMLVideoElement | null;
}

export interface PresentationDataState {
    runtimeEnvironment: RuntimeEnvironment;
    screenDimensions: Dimensions;
    srcDirectory: string;
    syncSpecFileMap: SyncSpecFileMap | null;
    autoSchedule: AutorunSchedule | null;
}
export interface SyncSpecFileMap {
    [name: string]: SyncSpecDownload;
}
export interface SyncSpecDownload {
    name: string;
    hash: SyncSpecHash;
    size: number;
    link: string;
}
interface SyncSpecHash {
    method: string;
    hex: string;
}
interface SyncSpecMeta {
    client: any;
    server: any;
}
export interface RawSyncSpecFiles {
    download: SyncSpecDownload[];
    ignore: any;
    delete: any;
}
export interface RawSyncSpec {
    meta: SyncSpecMeta;
    files: RawSyncSpecFiles;
}
export {};

export interface AutorunSchedule {
    scheduledPresentations: ScheduledPresentation[];
}
export interface ScheduledPresentation {
    presentationToSchedule: ScheduledPresentationFileData;
    presentationLocator: BsAssetLocator;
    dateTime: string;
    duration: number;
    allDayEveryDay: boolean;
    recurrence: boolean;
    recurrencePattern: string;
    recurrencePatternDaily: string;
    recurrencePatternDaysOfWeek: number;
    recurrenceStartDate: string;
    recurrenceGoesForever: boolean;
    recurrenceEndDate: string;
    interruption: boolean;
}
export interface ScheduledPresentationFileData {
    name: string;
    fileName: string;
    filePath: string;
}

export enum BsUiErrorType {
    unknownError = 0,
    unexpectedError = 1,
    invalidParameters = 2,
    invalidOperation = 3,
    apiError = 4,
    invalidModel = 5
}
export class BsUiError extends Error {
    name: string;
    type: BsUiErrorType;
    constructor(type: BsUiErrorType, reason?: string);
}
export function isBsUiError(error: Error): error is BsUiError;

